<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Melody FOR Autumn</title>
    <link>https://ex-melody.github.io/</link>
    <description>Recent content on Melody FOR Autumn</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 10 Sep 2022 05:49:55 +0000</lastBuildDate><atom:link href="https://ex-melody.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL事务不支持Truncate操作回滚</title>
      <link>https://ex-melody.github.io/work/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8D%E6%94%AF%E6%8C%81truncate%E6%93%8D%E4%BD%9C%E5%9B%9E%E6%BB%9A/</link>
      <pubDate>Sat, 10 Sep 2022 05:49:55 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/work/mysql%E4%BA%8B%E5%8A%A1%E4%B8%8D%E6%94%AF%E6%8C%81truncate%E6%93%8D%E4%BD%9C%E5%9B%9E%E6%BB%9A/</guid>
      <description>数据库某张表不断使用delete清理历史数据又插入新数据的话，数据库的主键id会不断增长，最后影响查询效率，所以偶尔需要truncate表格清空id后再插入新的数据。但MySQl的事务虽然支持delete却不支持truncate,drop等操作。
因此，只要表格没有外键的话可以用以下操作代替truncate操作
 创建一个和原表mytable结构一样的新表mytable_new，将原表改名为备份表mytable_backup，再将新表改名为原表的名字mytable。
使用RENAME命令同时对两张表改名是一个原子操作，可以确保数据库中任何时间都存在一张名叫mytable的表格。  CREATE TABLE mytable_new LIKE mytable; RENAME TABLE mytable TO mytable_backup,mytable_new TO mytable; 一些业务逻辑代码向当前的mytable插入数据，失败就抛出异常  如果插入成功，删除作为备份的原表  DROP TABLE mytable_backup;  如果发现异常，将新表删除，将原表恢复  RENAME TABLE mytable TO mytable_drop,mytable_backup TO mytable; DROP TABLE mytable_drop; </description>
    </item>
    
    <item>
      <title>ebayAPI请求新增的签名机制处理流程，java</title>
      <link>https://ex-melody.github.io/work/ebayapi%E8%AF%B7%E6%B1%82%E6%96%B0%E5%A2%9E%E7%9A%84%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B-java/</link>
      <pubDate>Thu, 18 Aug 2022 05:49:55 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/work/ebayapi%E8%AF%B7%E6%B1%82%E6%96%B0%E5%A2%9E%E7%9A%84%E7%AD%BE%E5%90%8D%E6%9C%BA%E5%88%B6%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B-java/</guid>
      <description>部分站点因为新的安全政策，API请求需要额外新增四个header  x-ebay-signature-key将RSA公钥或ed25519公钥 转为jwe格式，公钥文件从ebay后续api下载 Content-Digest http请求body的内容摘要,使用SHA-256算法处理body生成摘要 Signature-Input 决定由哪些字段拼接为signature-base Signature 通过私钥对signature-base进行签名的得到 请求头的名字大小写不敏感  流程   通过ebay未来提供的api下载公钥私钥文件。
  将公钥转为jwe格式的字符串作为请求header x-ebay-signature-key。
  为api请求的body内容计算摘要content-digest，作为请求header Content-Digest
  ebay已经指定 header signature-Input 为sig1=(&amp;ldquo;content-digest&amp;rdquo; &amp;ldquo;x-ebay-signature-key&amp;rdquo; &amp;ldquo;@method&amp;rdquo; &amp;ldquo;@path&amp;rdquo; &amp;ldquo;@authority&amp;rdquo;);created=1658272908代表要根据content-digest，x-ebay-signature-key两个请求头的内容和http请求的&amp;quot;@method&amp;quot; &amp;ldquo;@path&amp;rdquo; &amp;ldquo;@authority&amp;quot;属性拼接signatureBase。 可直接通过URI对象获取这些@开头的属性。
URI uri = URI.create(url); String method = uri.getMethod();
  使用私钥文件为刚刚构造的signatureBase签名作为请求header Signature。
  拼接signature base的格式要求   详细的格式要求和签名机制可参考文档https://www.ietf.org/archive/id/draft-ietf-httpbis-message-signatures-11.html
  signature base每一行都是&amp;quot;key&amp;rdquo;: value\n的形式，key用&amp;quot;&amp;ldquo;括起来并且全部小写，冒号后附加单独的空格，value结束后换行。最后一行是@signature-params。 ebay指定了请求header signature-Input为
  signature-Input:sig1=(&amp;#34;content-digest&amp;#34; &amp;#34;x-ebay-signature-key&amp;#34; &amp;#34;@method&amp;#34; &amp;#34;@path&amp;#34; &amp;#34;@authority&amp;#34;);created=1658272908   created后面附加的是时间戳。</description>
    </item>
    
    <item>
      <title>类目同步是否支持多属性</title>
      <link>https://ex-melody.github.io/work/%E6%9B%B4%E6%96%B0%E7%B1%BB%E7%9B%AE%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Thu, 18 Aug 2022 05:49:55 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/work/%E6%9B%B4%E6%96%B0%E7%B1%BB%E7%9B%AE%E6%98%AF%E5%90%A6%E6%94%AF%E6%8C%81%E5%A4%9A%E5%B1%9E%E6%80%A7/</guid>
      <description>类目同步是否支持多属性  接口只返回与父类目不一致的类目，以及站点的默认配置 调用接口获取所有与父类目不一致的类目id 查询类目表，获取这批类目的所属层级 将接口返回的类目id按层级分组，并从类目树最底层的类目开始向上遍历层级 遍历到的当前层级，本层类目按true和false分组，每一组更新他们所有还未标记是否支持多属性的子类目 将所有剩下未标记是否支持多属性的类目更新为站点默认配置  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://ex-melody.github.io/coworker_pri/%E5%88%86%E8%A1%A8%E5%88%86%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/coworker_pri/%E5%88%86%E8%A1%A8%E5%88%86%E5%BA%93/</guid>
      <description>本文只讨论水平分表，垂直分表属于业务重构问题
 为什么分表 参考下图，t_user表根据业务字段id拆分，奇数放入table1，偶数放入table2 通过一个或多个字段/规则将数据分散到多个数据库、数据表中，使得业务数据突破单表性能瓶颈。
为什么效率高：
 减少单表数据、索引大小，提高读写效率 开多个线程并发读写分片数据（十个线程分别从一千万表中读 VS 一个线程从一亿表中读） 提前缩小读写范围，sql条件中有id（分片列），只需要读写对应分片表即可  带来的问题：
 分表后表结构维护，数据运维 多线程写、跨库写时事务问题 复杂sql，insert into select,分表字段列update、limit、order by、group by某些情况下不能正确执行   举个例子 TODO
 技术选型     ShardingJDBC Mycat     分库 支持 支持   分表 支持 支持   实现方式 解析改写SQL 中间层代理   性能 损耗低 损耗略高   使用 引用jar包 需单独安装管理端   社区 star 15.1k Apache-2.0许可 star 9.2k GPL-2.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://ex-melody.github.io/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/readme/</guid>
      <description>hugoPosts </description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://ex-melody.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>InterruptedException异常处理</title>
      <link>https://ex-melody.github.io/work/interruptedexception%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ex-melody.github.io/work/interruptedexception%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>前置知识  InterruptedException代表在当前线程阻塞时，有其他线程调用了当前线程的interrupt()方法，当前线程收到了中断通知，中断标志位被设置为true。 interrupt()会将线程内的中断标志位更新为true，线程可自行检查标志位是否为true并结束线程（开发者自行编写代码，没有相关代码就不对中断通知做响应）。若标志位为true时，线程在执行阻塞方法（sleep(),wait()等），就会抛出InterruptedException。 抛出InterruptedException的同时会将线程中断标志位更新为false（若仅捕获该异常而不做处理，当前线程会失去响应外界中断通知的能力，无法通过中断标志位的变化察觉是否收到中断通知）。 InterruptedException异常会将处理标志位更新为false，是因为阻塞方法使用了Thread类的静态方法isInterrupted()检查当前标志位是否为true，该方法在检查标志位后就会将标志位更新为false。  处理方式  对外抛出不做额外封装的InterruptedException，由上层方法决定如何处理该异常。 不能抛出异常的情况下，需要将中断标志位更新为true，保留方法响应外界中断通知的能力。线程内部可自定义代码根据中断标志位的状态决定是否结束线程。  实验代码 public static void main(String[] args) { //对当前线程发出中断通知，实质上仅仅是将线程的中断标志位设置为true,需要线程根据中断标志位的状态做相应处理，线程自身并不会直接结束 Thread.currentThread().interrupt(); System.out.println(&amp;#34;interrupt status is &amp;#34; + Thread.currentThread().isInterrupted() +&amp;#34; and Thread still alive&amp;#34;); try { //sleep让线程阻塞，阻塞过程中发现中断标志位是true立刻抛出异常。 Thread.currentThread().sleep(2000); } catch (InterruptedException e) { if (Thread.currentThread().isInterrupted()) { System.out.println(&amp;#34;interrupt status now is true&amp;#34;); } else { //阻塞方法抛出异常后，中断标志位发现已被更新为false System.out.println(&amp;#34;after throw exception,interrupt status now is false&amp;#34;); } //重新设置标志位为true，保留线程根据标志位响应中断通知的能力 Thread.currentThread().interrupt(); } if (Thread.interrupted()) { System.out.println(&amp;#34;set interrupt status as True&amp;#34;); if (!</description>
    </item>
    
  </channel>
</rss>
